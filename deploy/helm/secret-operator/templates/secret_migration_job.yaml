---
{{ if .Values.secretMigrationJob.enabled -}}
# Migrates the TLS CA key pair from the hard-coded default namespace to the operator namespace
# See https://github.com/stackabletech/secret-operator/issues/453
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "operator.fullname" . }}-secret-migration
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "-5"
  labels:
    {{- include "operator.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "operator.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.image.pullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "operator.fullname" . }}-secret-migration-serviceaccount
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: migrate-secret
        image: "{{ .Values.secretMigrationJob.image.repository }}:{{ .Values.secretMigrationJob.image.tag | default (print "1.0.0-stackable" .Chart.AppVersion) }}"
        imagePullPolicy: {{ .Values.secretMigrationJob.image.pullPolicy }}
        resources:
            {{ .Values.secretMigrationJob.resources | toYaml | nindent 12 }}
        command: ["bash", "-c"]
        args:
        - |
          #!/bin/bash
          set -euo pipefail
          SOURCE_NAMESPACE=default
          TARGET_NAMESPACE={{ .Values.secretClasses.tls.caSecretNamespace | default .Release.Namespace }}

          # only continue if secret exists
          if source_ca_secret="$(kubectl get secret -n $SOURCE_NAMESPACE secret-provisioner-tls-ca -o json)"; then
            echo "secret exists in namespace $SOURCE_NAMESPACE"
            # only continue if secret in target namespace does NOT exist
            if ! kubectl get secret -n $TARGET_NAMESPACE secret-provisioner-tls-ca; then
              echo "secret does not exist in namespace $TARGET_NAMESPACE"
              # copy secret from default to {{ .Values.secretClasses.tls.caSecretNamespace | default .Release.Namespace }}
              echo "$source_ca_secret" | jq 'del(.metadata["namespace","creationTimestamp","resourceVersion","selfLink","uid"])' | kubectl apply -n $TARGET_NAMESPACE -f -
            fi
          fi
      restartPolicy: Never
{{- end }}
